{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\muril\\\\omnistack\\\\frontend\\\\src\\\\pages\\\\New.js\";\nimport React, { Component } from 'react';\nimport api from '../services/api';\nimport './New.css';\n\nclass New extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      image: null,\n      author: '',\n      place: '',\n      description: '',\n      hashtags: ''\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault(); //como tem imagem nos dados, poderia enviar diretamente como JSON, mas está sendo enviado como multiform\n      //por isso a criação da const data\n\n      const data = new FormData();\n      data.append('image', this.state.image);\n      data.append('author', this.state.author);\n      data.append('place', this.state.place);\n      data.append('description', this.state.description);\n      data.append('hashtags', this.state.hashtags);\n      await api.post('posts', data); //ao finalizar, redireciona para a página inicial\n      //o push faz enviar para uma nova rota\n\n      this.props.history.push('/');\n    };\n\n    this.handleImageChange = e => {\n      this.setState({\n        image: e.target.files[0]\n      });\n    };\n\n    this.handleChange = e => {\n      //essa linha faz com que o nome do campo vire a variável do state, passando o valor do input para aquela variável\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      id: \"new-post\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.handleImageChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"author\",\n      placeholder: \"Autor do post\",\n      onChange: this.handleChange,\n      value: this.state.author,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"place\",\n      placeholder: \"Local do post\",\n      onChange: this.handleChange,\n      value: this.state.place,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"description\",\n      placeholder: \"Descri\\xE7\\xE3o do post\",\n      onChange: this.handleChange,\n      value: this.state.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"hashtags\",\n      placeholder: \"Hashtags do post\",\n      onChange: this.handleChange,\n      value: this.state.hashtags,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Postar\"));\n  }\n\n}\n\nexport default New;","map":{"version":3,"sources":["C:\\Users\\muril\\omnistack\\frontend\\src\\pages\\New.js"],"names":["React","Component","api","New","state","image","author","place","description","hashtags","handleSubmit","e","preventDefault","data","FormData","append","post","props","history","push","handleImageChange","setState","target","files","handleChange","name","value","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport api from '../services/api';\r\n\r\nimport './New.css';\r\n\r\nclass New extends Component {\r\n\r\n    state = {\r\n        image: null,\r\n        author: '',\r\n        place: '',\r\n        description: '',\r\n        hashtags: '',\r\n    };\r\n\r\n    //async para usar o await na api.post\r\n    handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        //como tem imagem nos dados, poderia enviar diretamente como JSON, mas está sendo enviado como multiform\r\n        //por isso a criação da const data\r\n        const data = new FormData();\r\n\r\n        data.append('image', this.state.image);\r\n        data.append('author', this.state.author);\r\n        data.append('place', this.state.place);\r\n        data.append('description', this.state.description);\r\n        data.append('hashtags', this.state.hashtags);\r\n\r\n        await api.post('posts', data)\r\n\r\n        //ao finalizar, redireciona para a página inicial\r\n        //o push faz enviar para uma nova rota\r\n        this.props.history.push('/');\r\n        \r\n    }\r\n\r\n    handleImageChange = e => {\r\n        this.setState({ image: e.target.files[0] });\r\n    }\r\n    \r\n    //esse formato de function para poder acessar o this\r\n    handleChange = e => {\r\n        //essa linha faz com que o nome do campo vire a variável do state, passando o valor do input para aquela variável\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"new-post\" onSubmit={this.handleSubmit} >\r\n                <input type=\"file\" onChange={this.handleImageChange}/>\r\n                <input type=\"text\" name=\"author\" placeholder=\"Autor do post\" onChange={this.handleChange} value={this.state.author}/>\r\n                <input type=\"text\" name=\"place\" placeholder=\"Local do post\" onChange={this.handleChange} value={this.state.place}/>\r\n                <input type=\"text\" name=\"description\" placeholder=\"Descrição do post\" onChange={this.handleChange} value={this.state.description}/>\r\n                <input type=\"text\" name=\"hashtags\" placeholder=\"Hashtags do post\" onChange={this.handleChange} value={this.state.hashtags}/>\r\n\r\n                <button type=\"submit\">Postar</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default New;"]},"metadata":{},"sourceType":"module"}